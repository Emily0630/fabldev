cut(distance,
breaks = c(-Inf, breaks, Inf)) %>%
as.integer()
comparisons <- vector(mode = "list", length = F)
for(f in 1:F){
if(types[f] == "bi"){
comp <- matrix(1, nrow = dim(ids)[1], ncol = 2)
comp <- df_1[ids_1, fields_1[f]] == df_2[ids_2, fields_2[f]]
comp <- 1- as.numeric(comp)
comparisons[[f]] <- factor(comp)
}
if(types[f] == "lv"){
distance <- 1 - levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
comp <- cut(distance,
breaks = c(-Inf, breaks, Inf)) %>%
as.integer() %>%
factor()
comparisons[[f]] <- comp
}
if(types[f] == "num"){
distance <- abs(df_1[ids_1, fields_1[f]] - df_2[ids_2, fields_2[f]])
comp <- cut(distance,
breaks = breaks[[f]],
include.lowest = T) %>%
as.integer()
comparisons[[f]] <- comp
}
}
ohe <- comparisons %>%
lapply(. , function(x){
if(any(is.na(x)) == T){
scorecard::one_hot(data.frame(x), nacol_rm = T) %>%
as.matrix()
} else {
scorecard::one_hot(data.frame(x)) %>%
as.matrix()
}
}) %>%
do.call(data.frame, .)
ohe[look_at[1], ]
cd$comparisons[look_at[1], ]
cd <- compare_records(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
#breaks = c(0, .25))
cd[[1]] <- apply(cd[[1]], 2, as.numeric)
cd$comparisons[look_at[1], ]
cd$comparisons[look_at[2], ]
ohe[look_at[2], ]
ids[look_at[2], ]
df_1[371, ]
df_2[40, ]
levitate::lev_ratio("anton", "nathan")
distance[look_at[2]]
distance
distance <- 1 - levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
distance <- levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
f
f= 1
distance <- levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
distance[look_at[2]]
comp <- cut(distance,
breaks = c(-Inf, breaks, Inf))
comp[look_at[2]]
cd$comparisons[look_at[2], ]
pairInds1 <- rep(1:n1, n2)
pairInds2 <- rep(1:n2, each=n1)
df1 <- df_1
df2 <- df_2
f
fld <- 1
flds1 <- flds2 <- fields
# computing agreement levels for Levenshtein-based comparisons
df1[,flds1[fld]] <- as.character(df1[,flds1[fld]])
df2[,flds2[fld]] <- as.character(df2[,flds2[fld]])
# adist in the utils package returns the matrix of Levenshtein distances
lvd <- as.numeric(utils::adist(df1[,flds1[fld]], df2[,flds2[fld]]))/
pmax(nchar(df1[,flds1[fld]])[pairInds1], nchar(df2[,flds2[fld]])[pairInds2])
lvd[look_at]
distance[look_at]
nchar(df1[,flds1[fld]])
df_2[look_at, 2]
df_2[look_at, ]
nchar(df1[,flds1[fld]])[pairInds1]
df1[,flds1[fld]]
nchar(df1[,flds1[fld]])
df2[,flds2[fld]]
nchar(df2[,flds2[fld]])
utils::adist(df1[,flds1[fld]], df2[,flds2[fld]])
as.numeric(utils::adist(df1[,flds1[fld]], df2[,flds2[fld]]))
levitate::lev_distance(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
distance <- 1 -
thing1 <- levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
thing1 <- levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
thing2 <- levitate::lev_distance(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
sum(thing1 == thing2)
thing1
thing1 <- as.numeric(utils::adist(df1[,flds1[fld]], df2[,flds2[fld]]))
sum(thing1 == thing2)
which(thing1 != thing2)
diff_distance <- which(thing1 != thing2)
thing1[diff_distance]
thing2[diff_distance]
ids[diff_distance, ]
df1[447, ]
df2[2, ]
?levitate::lev_distance
df1[486, ]
df1[11, ]
df2[218, ]
df1[394, ]
df2[216, ]
df1[22, ]
df1[3, ]
for(f in 1:F){
if(types[f] == "bi"){
comp <- matrix(1, nrow = dim(ids)[1], ncol = 2)
comp <- df_1[ids_1, fields_1[f]] == df_2[ids_2, fields_2[f]]
comp <- 1- as.numeric(comp)
comparisons[[f]] <- factor(comp)
}
if(types[f] == "lv"){
# Damerau-Levenshtein distance, so transpositions count as 1.
# In contrast, BRL uses standard Levenshtein, so transpositions count as 2
distance <- 1 - levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
comp <- cut(distance,
breaks = c(-Inf, breaks, Inf)) %>%
as.integer() %>%
factor()
comparisons[[f]] <- comp
}
if(types[f] == "num"){
distance <- abs(df_1[ids_1, fields_1[f]] - df_2[ids_2, fields_2[f]])
comp <- cut(distance,
breaks = breaks[[f]],
include.lowest = T) %>%
as.integer()
comparisons[[f]] <- comp
}
}
ohe <- comparisons %>%
lapply(. , function(x){
if(any(is.na(x)) == T){
scorecard::one_hot(data.frame(x), nacol_rm = T) %>%
as.matrix()
} else {
scorecard::one_hot(data.frame(x)) %>%
as.matrix()
}
}) %>%
do.call(data.frame, .)
thing <- matrix(1:9, 3, 3)
thing[c(1, 2), ]
thing[c(1, 2), c(1, 2)]
ohe_1 <- matrix(0, ncol = n1*n2, nrow = 4)
comp
distance <- 1 - levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
comp <- cut(distance,
breaks = c(-Inf, breaks, Inf)) %>%
as.integer() %>%
factor()
# Damerau-Levenshtein distance, so transpositions count as 1.
# In contrast, BRL uses standard Levenshtein, so transpositions count as 2
distance <- 1 - levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
# Damerau-Levenshtein distance, so transpositions count as 1.
# In contrast, BRL uses standard Levenshtein, so transpositions count as 2
distance <- levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
f
f = 1
# Damerau-Levenshtein distance, so transpositions count as 1.
# In contrast, BRL uses standard Levenshtein, so transpositions count as 2
distance <- levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
comp <- cut(distance,
breaks = c(-Inf, breaks, Inf)) %>%
as.integer() %>%
factor()
comp
ohe_1 <- matrix(0, ncol = n1*n2, nrow = 4)
for(l in 1:4){
ohe_1[comp == l] <-  1
}
x = comparisons[[1]]
scorecard::one_hot(data.frame(x), nacol_rm = T) %>%
as.matrix()
scorecard::one_hot(data.frame(x)) %>%
as.matrix()
ohe_1 <- matrix(0, ncol = n1*n2, nrow = 4)
for(l in 1:4){
ohe_1[comp == l] <-  1
}
ohe <- vector(mode = "list", length = F)
levels(comparisons[[1]])
for(f in 1:F){
if(types[f] == "bi"){
comp <- matrix(1, nrow = dim(ids)[1], ncol = 2)
comp <- df_1[ids_1, fields_1[f]] == df_2[ids_2, fields_2[f]]
comp <- 1- as.numeric(comp)
comparisons[[f]] <- factor(comp)
}
if(types[f] == "lv"){
# Damerau-Levenshtein distance, so transpositions count as 1.
# In contrast, BRL uses standard Levenshtein, so transpositions count as 2
distance <- levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
comp <- cut(distance,
breaks = c(-Inf, breaks, Inf)) %>%
as.integer() %>%
factor()
comparisons[[f]] <- comp
}
if(types[f] == "num"){
distance <- abs(df_1[ids_1, fields_1[f]] - df_2[ids_2, fields_2[f]])
comp <- cut(distance,
breaks = breaks[[f]],
include.lowest = T) %>%
as.integer()
comparisons[[f]] <- comp
}
}
for(f in 1:F){
L_f <- length(levels(comparisons[[f]]))
ohe[[f]] <- matrix(0, nrow = n1 * n2, ncol = L_f)
for(ell in 1:L_f){
ohe[[f]][comparisons[[f]] == ell, ] <- 1
}
}
gamma <- do.call(cbind, ohe) %>%
data.frame()
View(gamma)
f = 1
L_f <- length(levels(comparisons[[f]]))
ohe[[f]] <- matrix(0, nrow = n1 * n2, ncol = L_f)
ohe[[f]]
ell = 1
ohe[[f]][comparisons[[f]] == ell, ]
for(f in 1:F){
L_f <- length(levels(comparisons[[f]]))
ohe[[f]] <- matrix(0, nrow = n1 * n2, ncol = L_f)
for(ell in 1:L_f){
ohe[[f]][comparisons[[f]] == ell, ell] <- 1
}
}
gamma <- do.call(cbind, ohe) %>%
data.frame()
View(gamma)
f = 3
L_f <- length(levels(comparisons[[f]]))
L_f
ohe[[f]] <- matrix(0, nrow = n1 * n2, ncol = L_f)
comparisons[[f]]
lev_ratio("cat", "cat")
levitate::lev_ratio("cat", "cat")
f = 3
comp <- matrix(1, nrow = dim(ids)[1], ncol = 2)
comp <- df_1[ids_1, fields_1[f]] == df_2[ids_2, fields_2[f]]
comp <- !comp + 1
comparisons[[f]] <- factor(comp)
L_f <- length(levels(comparisons[[f]]))
L_f
comparisons[[f]]
f
comp <- df_1[ids_1, fields_1[f]] == df_2[ids_2, fields_2[f]]
sum(comp)
sum(comp, na.rm = T)
comp
comp <- !comp + 1
comp
comp <- df_1[ids_1, fields_1[f]] == df_2[ids_2, fields_2[f]]
comp <- (!comp) + 1
comp
comparisons[[f]] <- factor(comp)
L_f <- length(levels(comparisons[[f]]))
L_f
ohe[[f]] <- matrix(0, nrow = n1 * n2, ncol = L_f)
for(ell in 1:L_f){
ohe[[f]][comparisons[[f]] == ell, ell] <- 1
}
for(f in 1:F){
if(types[f] == "bi"){
comp <- matrix(1, nrow = dim(ids)[1], ncol = 2)
comp <- df_1[ids_1, fields_1[f]] == df_2[ids_2, fields_2[f]]
comp <- (!comp) + 1
comparisons[[f]] <- factor(comp)
}
if(types[f] == "lv"){
# Damerau-Levenshtein distance, so transpositions count as 1.
# In contrast, BRL uses standard Levenshtein, so transpositions count as 2
distance <- levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
comp <- cut(distance,
breaks = c(-Inf, breaks, Inf)) %>%
as.integer() %>%
factor()
comparisons[[f]] <- comp
}
if(types[f] == "num"){
distance <- abs(df_1[ids_1, fields_1[f]] - df_2[ids_2, fields_2[f]])
comp <- cut(distance,
breaks = breaks[[f]],
include.lowest = T) %>%
as.integer()
comparisons[[f]] <- comp
}
}
for(f in 1:F){
L_f <- length(levels(comparisons[[f]]))
ohe[[f]] <- matrix(0, nrow = n1 * n2, ncol = L_f)
for(ell in 1:L_f){
ohe[[f]][comparisons[[f]] == ell, ell] <- 1
}
}
gamma <- do.call(cbind, ohe) %>%
data.frame()
View(gamma)
for(f in 1:F){
if(types[f] == "bi"){
comp <- matrix(1, nrow = dim(ids)[1], ncol = 2)
comp <- df_1[ids_1, fields_1[f]] == df_2[ids_2, fields_2[f]]
comp <- (!comp) + 1
comparisons[[f]] <- factor(comp)
}
if(types[f] == "lv"){
# Damerau-Levenshtein distance, so transpositions count as 1.
# In contrast, BRL uses standard Levenshtein, so transpositions count as 2
distance <- 1 - levitate::lev_ratio(as.character(df_1[ids_1, fields_1[f]]),
as.character(df_2[ids_2, fields_2[f]]),
useNames = F)
comp <- cut(distance,
breaks = c(-Inf, breaks, Inf)) %>%
as.integer() %>%
factor()
comparisons[[f]] <- comp
}
if(types[f] == "num"){
distance <- abs(df_1[ids_1, fields_1[f]] - df_2[ids_2, fields_2[f]])
comp <- cut(distance,
breaks = breaks[[f]],
include.lowest = T) %>%
as.integer()
comparisons[[f]] <- comp
}
}
for(f in 1:F){
L_f <- length(levels(comparisons[[f]]))
ohe[[f]] <- matrix(0, nrow = n1 * n2, ncol = L_f)
for(ell in 1:L_f){
ohe[[f]][comparisons[[f]] == ell, ell] <- 1
}
}
gamma <- do.call(cbind, ohe) %>%
data.frame()
View(gamma)
devtools::load_all(".")
roxygen2::roxygenise()
cd <- compare_records(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
cd_BK <- compare_records_BK(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
n_levels <- lapply(comparisons, levels) %>%
sapply(., length)
devtools::load_all(".")
cd_BK <- compare_records_BK(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
cd <- compare_records(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
cd_BK <- compare_records_BK(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
devtools::load_all(".")
cd_BK <- compare_records_BK(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
View(cd_BK)
hash <- hash_comparisons(cd, all_patterns, method = c("vabl", "fabl", "brl"))
devtools::load_all(".")
hash <- hash_comparisons(cd, all_patterns, algorithm = c("vabl", "fabl", "brl"))
indicators <- cd[[1]]
N <- dim(indicators)[1]
n1 <- cd[[2]]
n2 <- cd[[3]]
levels <- cd[[4]]
fields <- seq_along(cd[[4]])
field_marker <- sapply(fields, function(x){
rep(x, cd[[4]][x])
}) %>%
unlist(.) %>%
as.vector(.)
ids <- expand.grid(1:n1, 1:n2)
rec1 <- ids[,1]
rec2 <- ids[,2]
Lf_vec<- (levels) %>%
c(0, .) %>%
cumsum()
hash_vals <- purrr::imap(cd[[4]], ~hash_field(.x, .y, Lf_vec)) %>%
unlist()
hash <- sweep(indicators, 2, hash_vals, "*") %>%
rowSums() + 1
if(all_patterns == TRUE){
unique_patterns <- possible_patterns_ohe(levels)
unique_hashed <- sweep(unique_patterns, 2, hash_vals, "*") %>%
rowSums() + 1
P <- dim(unique_patterns)[1]
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
} else {
unique_hashed <- unique(hash)
P <- length(unique_hashed)
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
unique_patterns <- indicators[!duplicated(hash_id), ]
}
temp <- data.frame(rec1, rec2, hash_id)
hash_count_list <- temp %>%
group_by(rec2, hash_id, .drop = F) %>%
count() %>%
ungroup() %>%
group_split(rec2) %>%
purrr::map(~.x %>%
select(n) %>%
pull()
)
#total_counts <- rowSums(hash_count_list)
total_counts <- temp %>%
group_by(hash_id, .drop = F) %>%
count() %>%
pull()
pattern_lookup <- expand.grid(1:P, 1:n2) %>%
data.frame() %>%
setNames(., c("hash_id", "rec2"))
pair_to_pattern <- NULL
if("BRL_hash" %in% algorithm){
pair_to_pattern <- temp %>%
select(hash_id, rec2) %>%
group_split(rec2, .keep = F) %>%
lapply(., pull) %>%
lapply(., as.double)
}
algorithm = c("vabl", "fabl", "BRL_hash")
if("BRL_hash" %in% algorithm){
pair_to_pattern <- temp %>%
select(hash_id, rec2) %>%
group_split(rec2, .keep = F) %>%
lapply(., pull) %>%
lapply(., as.double)
}
hash_to_file_1 <- temp %>%
select(rec1, rec2, hash_id) %>%
nest_by(rec2, hash_id, .keep = F) %>%
mutate(hash_id = as.integer(hash_id)) %>%
rowwise() %>%
mutate(N = nrow(data))
hash_to_file_1 <- left_join(x = pattern_lookup,
y = hash_to_file_1,
by = c("hash_id", "rec2"))
hash_to_file_1$N[is.na(hash_to_file_1$N)] <- 0
flags <- NULL
if("vabl" %in% algorithm){
flags <- hash_to_file_1 %>%
filter(N ==1) %>%
tidyr::unnest(data) %>%
tidyr::complete(rec2 = unique(hash_to_file_1$rec2)) %>%
select(-N) %>%
setNames(c("rec2", "eligible_patterns", "eligible_records")) %>%
group_split(rec2, .keep = F)
}
if("fabl" %in% algorithm | "BRL_hash" %in% algorithm){
hash_to_file_1 <- hash_to_file_1 %>%
group_split(rec2) %>%
purrr::map(., ~ .x %>%
group_split(hash_id)) %>%
purrr::map(., ~purrr::map(.x, `[[`, "data")) %>%
purrr::map(., ~purrr::map(., ~ unname(unlist(.x))))
if(!is.null(R)){
hash_to_file_1 <- lapply(hash_to_file_1, function(z){
purrr::map(z, ~sei(.x, R))
})}
}
if(!("fabl" %in% algorithm) & !("BRL_hash" %in% algorithm)){
hash_to_file_1 <- NULL
}
R
library(devtools)
document()
roxygen2::roxygenize()
install_github("briankundinger/fabldev")
remove.packages("fabldev")
install_github("briankundinger/fabldev")
