} else {
seq(0, P)
}
}) %>%
do.call(expand.grid, .) %>%
data.frame()
column_names <- sapply(seq_len(max_K), function(x){
paste0(X, x)
})
column_names <- sapply(seq_len(max_K), function(x){
paste0("X", x)
})
column_names <- sapply(seq_len(max_K), function(x){
paste0("X", x)
})
pattern_combinations <- lapply(seq_len(max_K), function(x){
if(x == 1){
seq(1, P)
} else {
seq(0, P)
}
}) %>%
do.call(expand.grid, .) %>%
data.frame() %>%
setNames(column_names)
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(3) %>%
t() %>%
data.frame() %>%
group_by_all() %>%
count()
combo_counts
?left_join
left_join(pattern_combinations, combo_counts)
full_set <- left_join(pattern_combinations, combo_counts)
full_set <- left_join(pattern_combinations, combo_counts)
full_set
full_set$n[is.na(full_set$n)] <- 0
sum(full_set$n)
combo_counts
temp <- data.frame(indicators, rec1, rec2, hash_id)
thing$hash_id[1]
thing$hash_id[0]
thing$hash_id[-1]
example <- c(1, 2, 3)
example[0]
example[3]
example[0] * 12
example[0] <- 4
example
example[0]
example[0] <- 4
all_patterns
all_patterns <-TRUE
if(all_patterns == TRUE){
unique_patterns <- possible_patterns_sadinle(levels)
unique_hashed <- sweep(unique_patterns, 2, hash_vals, "*") %>%
rowSums() + 1
P <- dim(unique_patterns)[1]
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
} else {
unique_hashed <- unique(hash)
P <- length(unique_hashed)
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
unique_patterns <- indicators[!duplicated(hash_id), ]
}
unique_patterns[1, ]
temp <- data.frame(indicators, rec1, rec2, hash_id)
max_K <- 3
column_names <- sapply(seq_len(max_K), function(x){
paste0("X", x)
})
pattern_combinations <- lapply(seq_len(max_K), function(x){
if(x == 1){
seq(1, P)
} else {
seq(0, P)
}
}) %>%
do.call(expand.grid, .) %>%
data.frame() %>%
setNames(column_names)
pattern_combinations
temp2 <- temp %>%
group_split(rec2)
thing <- temp2[[1]]
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(3) %>%
t() %>%
data.frame() %>%
group_by_all() %>%
count()
combo_counts
View(combo_counts)
max_K <- 2
column_names <- sapply(seq_len(max_K), function(x){
paste0("X", x)
})
pattern_combinations <- lapply(seq_len(max_K), function(x){
if(x == 1){
seq(1, P)
} else {
seq(0, P)
}
}) %>%
do.call(expand.grid, .) %>%
data.frame() %>%
setNames(column_names)
P
P^2 / 2
P * (P - 1) / 2
P * (P - 1)
choose(P, 2)
pattern_combinations
P * P
P * P + P
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(max_K) %>%
t() %>%
data.frame() %>%
group_by_all() %>%
count()
full_set <- left_join(pattern_combinations, combo_counts)
full_set
lapply(seq_len(max_K), function(x){
if(x == 1){
seq(1, P)
} else {
seq(0, P)
}
})
rep(list(1:P), 2)
lapply(seq_along(max_K), function(k){
do.call(expand.grid, rep(list(1:P), k))
})
lapply(seq_len(max_K), function(k){
do.call(expand.grid, rep(list(1:P), k))
})
lapply(seq_len(max_K), function(k){
do.call(expand.grid, rep(list(1:P), k)) %>%
data.frame() %>%
setNames(column_names[1:k])
})
pattern_combinations <- lapply(seq_len(max_K), function(k){
do.call(expand.grid, rep(list(1:P), k)) %>%
data.frame() %>%
setNames(column_names[1:k])
})
temp2 <- temp %>%
group_split(rec2)
thing <- temp2[[1]]
k = 1
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(max_K) %>%
t() %>%
data.frame() %>%
group_by_all() %>%
count()
combo_counts
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(k) %>%
t() %>%
data.frame() %>%
group_by_all() %>%
count()
combo_counts
full_set <- left_join(pattern_combinations, combo_counts)
full_set <- left_join(pattern_combinations[[k]], combo_counts)
pattern_combinations[[k]]
combo_counts
thing$hash_id %>%
as.numeric() %>%
combn(k) %>%
t() %>%
data.frame()
thing$hash_id %>%
as.numeric() %>%
combn(2) %>%
t() %>%
data.frame()
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(2) %>%
t() %>%
data.frame() %>%
setNames(column_names[k])
full_set <- left_join(pattern_combinations[[k]], combo_counts)
thing$hash_id %>%
as.numeric() %>%
combn(2) %>%
t() %>%
data.frame() %>%
setNames(column_names[k])
group_by_all() %>%
count()
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(2) %>%
t() %>%
data.frame() %>%
setNames(column_names[k]) %>%
group_by_all() %>%
count()
thing$hash_id %>%
as.numeric() %>%
combn(2) %>%
t() %>%
data.frame()
thing$hash_id %>%
as.numeric() %>%
combn(2) %>%
t() %>%
data.frame() %>%
setNames(column_names[k])
thing$hash_id %>%
as.numeric() %>%
combn(2) %>%
t() %>%
data.frame() %>%
setNames(column_names[k]) %>%
group_by_all()
thing$hash_id
thing$hash_id %>%
as.numeric() %>%
combn(2) %>%
t() %>%
data.frame() %>%
setNames(column_names[k])
thing$hash_id %>%
as.numeric() %>%
combn(2) %>%
t() %>%
data.frame() %>%
setNames(column_names[1:2]) %>%
group_by_all() %>%
count()
thing$hash_id %>%
as.numeric() %>%
combn(k) %>%
t() %>%
data.frame() %>%
setNames(column_names[1:k]) %>%
group_by_all() %>%
count()
full_set <- left_join(pattern_combinations[[k]], combo_counts)
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(k) %>%
t() %>%
data.frame() %>%
setNames(column_names[1:k]) %>%
group_by_all() %>%
count()
full_set <- left_join(pattern_combinations[[k]], combo_counts)
full_set
full_set <- left_join(pattern_combinations[[k]], combo_counts)
full_set$n[is.na(full_set$n)] <- 0
combination_counts <- lapply(seq_len(max_K), function(k)){
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(k) %>%
t() %>%
data.frame() %>%
setNames(column_names[1:k]) %>%
group_by_all() %>%
count()
full_set <- left_join(pattern_combinations[[k]], combo_counts)
full_set$n[is.na(full_set$n)] <- 0
}
combination_counts <- lapply(seq_len(max_K), function(k){
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(k) %>%
t() %>%
data.frame() %>%
setNames(column_names[1:k]) %>%
group_by_all() %>%
count()
full_set <- left_join(pattern_combinations[[k]], combo_counts)
full_set$n[is.na(full_set$n)] <- 0
})
combination_counts
k = 1
combo_counts <- thing$hash_id %>%
as.numeric() %>%
combn(k) %>%
t() %>%
data.frame() %>%
setNames(column_names[1:k]) %>%
group_by_all() %>%
count()
full_set <- left_join(pattern_combinations[[k]], combo_counts)
full_set$n[is.na(full_set$n)] <- 0
full_set
pattern_combinations
exam <- pattern_combinations[[1]]
unique_patterns
x = 30
unique_patterns[, x]
unique_patterns[x, ]
unique_patterns[x, ] %>%
colSums()
unique_patterns[x, ] %>%
colSums()
apply(exam, 1, function(x){
unique_patterns[x, ] %>%
colSums()
})
exam
apply(exam, 1, function(x){
unique_patterns[x, ] %>%
colSums()
}) %>%
t()
exam <- pattern_combinations[[2]]
apply(exam, 1, function(x){
unique_patterns[x, ] %>%
colSums()
}) %>%
t()
x <- exam[5, ]
x
unique_patterns[x, ] %>%
colSums()
x
unique_patterns[unlist(x), ] %>%
colSums()
apply(exam, 1, function(x){
unique_patterns[unlist(x), ] %>%
colSums()
}) %>%
t()
combination_ohe <- lapply(seq_len(max_K), function(k){
combination_ohe <- lapply(seq_len(max_K), function(k){
apply(pattern_combinations[[k]], 1, function(x){
unique_patterns[unlist(x), ] %>%
colSums()
}) %>%
t()
})
all_patterns = F
if(all_patterns == TRUE){
unique_patterns <- possible_patterns_sadinle(levels)
unique_hashed <- sweep(unique_patterns, 2, hash_vals, "*") %>%
rowSums() + 1
P <- dim(unique_patterns)[1]
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
} else {
unique_hashed <- unique(hash)
P <- length(unique_hashed)
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
unique_patterns <- indicators[!duplicated(hash_id), ]
}
temp <- data.frame(indicators, rec1, rec2, hash_id)
max_K <- 2
column_names <- sapply(seq_len(max_K), function(x){
paste0("X", x)
})
P
pattern_combinations <- lapply(seq_len(max_K), function(k){
do.call(expand.grid, rep(list(1:P), k)) %>%
data.frame() %>%
setNames(column_names[1:k])
})
combination_ohe <- lapply(seq_len(max_K), function(k){
apply(pattern_combinations[[k]], 1, function(x){
unique_patterns[unlist(x), ] %>%
colSums()
}) %>%
t()
})
pattern_combinations
k = 1
apply(pattern_combinations[[k]], 1, function(x){
unique_patterns[unlist(x), ] %>%
colSums()
}) %>%
t()
apply(pattern_combinations[[k]], 1, function(x){
unique_patterns[unlist(x), ] %>%
colSums()
})
pattern_combinations[[k]]
k
pattern_combinations <- lapply(seq_len(max_K), function(k){
do.call(expand.grid, rep(list(1:P), k)) %>%
data.frame() %>%
setNames(column_names[1:k])
})
View(pattern_combinations)
pattern_combinations <- lapply(seq_len(max_K), function(k){
do.call(expand.grid, rep(list(1:P), k)) %>%
data.frame() %>%
setNames(column_names[1:k])
})
pattern_combinations[[k]]
x = 1
unique_patterns[unlist(x), ]
unique_patterns[unlist(x), ] %>%
colSums()
x = c(3, 5)
unique_patterns[unlist(x), ] %>%
colSums()
combination_ohe <- lapply(seq_len(max_K), function(k){
apply(pattern_combinations[[k]], 1, function(x){
if(k == 1){
unique_patterns[x, ]
} else {
unique_patterns[unlist(x), ] %>%
colSums()
}
}) %>%
t()
})
combination_ohe
letssee <- lapply(temp2, function(y){
combination_counts <- lapply(seq_len(max_K), function(k){
combo_counts <- y$hash_id %>%
as.numeric() %>%
combn(k) %>%
t() %>%
data.frame() %>%
setNames(column_names[1:k]) %>%
group_by_all() %>%
count()
full_set <- left_join(pattern_combinations[[k]], combo_counts)
full_set$n[is.na(full_set$n)] <- 0
full_set
})
combination_counts
})
View(letssee)
combination_counts <- lapply(temp2, function(y){
combo_counts <- lapply(seq_len(max_K), function(k){
combo_counts <- y$hash_id %>%
as.numeric() %>%
combn(k) %>%
t() %>%
data.frame() %>%
setNames(column_names[1:k]) %>%
group_by_all() %>%
count()
full_set <- left_join(pattern_combinations[[k]], combo_counts)
full_set$n[is.na(full_set$n)] <- 0
full_set$n
})
combo_counts
})
max_K = 1
column_names <- sapply(seq_len(max_K), function(x){
paste0("X", x)
})
pattern_combinations <- lapply(seq_len(max_K), function(k){
do.call(expand.grid, rep(list(1:P), k)) %>%
data.frame() %>%
setNames(column_names[1:k])
})
combination_ohe <- lapply(seq_len(max_K), function(k){
apply(pattern_combinations[[k]], 1, function(x){
if(k == 1){
unique_patterns[x, ]
} else {
unique_patterns[unlist(x), ] %>%
colSums()
}
}) %>%
t()
})
temp2 <- temp %>%
group_split(rec2)
combination_counts <- lapply(temp2, function(y){
combo_counts <- lapply(seq_len(max_K), function(k){
combo_counts <- y$hash_id %>%
as.numeric() %>%
combn(k) %>%
t() %>%
data.frame() %>%
setNames(column_names[1:k]) %>%
group_by_all() %>%
count()
full_set <- left_join(pattern_combinations[[k]], combo_counts)
full_set$n[is.na(full_set$n)] <- 0
full_set$n
})
combo_counts
})
combination_counts[[1]]
View(combination_counts)
install.packages("MCMCpack")
library(fabldev)
library(fabldev)
library(fabldev)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(fabldev)
```{r, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(fabldev)
