prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
ratio <- (log(m) - log(u)) %>%
rep(., P) %>%
matrix(., nrow = P, byrow = TRUE)
unique_weights <- exp(rowSums(ratio * unique_patterns, na.rm = TRUE))
for(j in sample(1:n2)){
if(Z[j] > 0){
L <- L - 1
Z_inv[Z[j]] <- 0
}
Z[j] <- 0
hash_weights <- counts_by_rec[[j]] * unique_weights
probs <- c((n1 - L) * (n2 - L + beta) / (L + alpha),
hash_weights)
# probs <- c((n1 - L) * (n2 - L - 1 + beta) / (L + alpha),
#            hash_weights) # You don't need the -1 here, since you updated L above
flag <- 1
iter <- 0
while(flag == 1){
pattern <- sample(candidates_P, 1, prob = probs)
if(pattern == 0){
Z[j] <- 0
flag <- 0
}
else{
index <- ceiling(runif(1) * counts_by_rec[[j]][pattern])
i <- hash_to_file_1[[j]][[pattern]][index]
if(Z_inv[i] == 0){
Z[j] <- i
flag <- 0
}
}
iter <- iter + 1
if(iter == reject_iter){
n_current <- counts_by_rec[[j]]
for(k in 1:n2){
if(Z[k] > 0){
ind <- pair_to_pattern[[j]][Z[k]]
n_current[ind] <- n_current[ind] -1
}
}
temp_weights <- n_current * unique_weights
probs <- c((n1 - L) * (n2 - L - 1 + beta) / (L + alpha),
temp_weights)
pattern <- sample(candidates_P, 1, prob = probs)
if(pattern == 0){
Z[j] <- 0
}
else{
flag_2 <- 1
npj <- counts_by_rec[[j]][pattern]
while(flag_2 == 1){
index <- ceiling(runif(1) * npj)
i <- hash_to_file_1[[j]][[pattern]][index]
if(Z_inv[i] == 0){
Z[j] <- i
flag_2 <- 0
}
}
}
flag <- 0
}
}
if(Z[j] > 0){
L <- L + 1
Z_inv[Z[j]] <- 1
}
}
hash_matches <- factor(Z_pattern, levels = 0:P)
df <- data.frame(hash_matches)
matches <- df %>%
group_by(hash_matches, .drop = F) %>%
count() %>%
filter(hash_matches != 0) %>%
pull()
AZ <- sweep(unique_patterns, MARGIN = 1, STAT = matches, FUN = "*") %>%
colSums() %>%
unname()
nonmatches <- pattern_counts - matches
BZ <- sweep(unique_patterns, MARGIN = 1, STAT = nonmatches, FUN = "*") %>%
colSums() %>%
unname()
m_post <- m_prior + AZ
u_post <- u_prior + BZ
m_post <- split(m_post, field_marker)
m <- as.vector(unlist(sapply(m_post, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
u_post <- split(u_post, field_marker)
u <- as.vector(unlist(sapply(u_post, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
ratio <- (log(m) - log(u)) %>%
rep(., P) %>%
matrix(., nrow = P, byrow = TRUE)
unique_weights <- exp(rowSums(ratio * unique_patterns, na.rm = TRUE))
j = 1
L
Z[j]
if(Z[j] > 0){
L <- L - 1
Z_inv[Z[j]] <- 0
}
Z[j] <- 0
hash_weights <- counts_by_rec[[j]] * unique_weights
probs <- c((n1 - L) * (n2 - L - 1 + beta) / (L + alpha),
hash_weights)
flag <- 1
iter <- 0
pattern <- sample(candidates_P, 1, prob = probs)
ceiling(runif(1) * counts_by_rec[[j]][pattern])
counts_by_rec[[j]]
counts_by_rec[[j]][pattern]
index <- ceiling(runif(1) * counts_by_rec[[j]][pattern])
i <- hash_to_file_1[[j]][[pattern]][index]
reject_iter
k
k = 2
j
pair_to_pattern[[j]]
pair_to_pattern[[j]][Z[k]]
library(fabldev)
library(ggplot2)
n1 <- 50
n2 <- 50
overlap <- n2/2
S = 50
burn = S * .1
show_progress <- T
fast = F
R <- NULL
all_patterns <- FALSE
m <- c(.05, .95, .05, .95, .05, .95, .05, .95, .05, .95)
u <- c(.99, .01, .99, .01,
1 - 1/30, 1/30, 1 - 1/12, 1/12, 1 - 1/15, 1/15)
levels <- c(2, 2, 2, 2, 2)
S <- 1000; burn <- S * .1
m_prior <- u_prior <- rep(1, length(m))
alpha <- beta <- 1
cd <- simulate_comparisons(m, u, levels, n1, n2, overlap)
indicators <- cd[[1]]
N <- dim(indicators)[1]
n1 <- cd[[2]]
n2 <- cd[[3]]
levels <- cd[[4]]
fields <- seq_along(cd[[4]])
field_marker <- sapply(fields, function(x){
rep(x, cd[[4]][x])
}) %>%
unlist(.) %>%
as.vector(.)
ids <- expand.grid(1:n1, 1:n2)
rec1 <- ids[,1]
rec2 <- ids[,2]
Lf_vec<- (levels) %>%
c(0, .) %>%
cumsum()
hash_vals <- purrr::imap(cd[[4]], ~hash_field(.x, .y, Lf_vec)) %>%
unlist()
devtools::load_all(".")
indicators <- cd[[1]]
N <- dim(indicators)[1]
n1 <- cd[[2]]
n2 <- cd[[3]]
levels <- cd[[4]]
fields <- seq_along(cd[[4]])
field_marker <- sapply(fields, function(x){
rep(x, cd[[4]][x])
}) %>%
unlist(.) %>%
as.vector(.)
ids <- expand.grid(1:n1, 1:n2)
rec1 <- ids[,1]
rec2 <- ids[,2]
Lf_vec<- (levels) %>%
c(0, .) %>%
cumsum()
hash_vals <- purrr::imap(cd[[4]], ~hash_field(.x, .y, Lf_vec)) %>%
unlist()
hash <- sweep(indicators, 2, hash_vals, "*") %>%
rowSums() + 1
if(all_patterns == TRUE){
unique_patterns <- possible_patterns_sadinle(levels)
unique_hashed <- sweep(unique_patterns, 2, hash_vals, "*") %>%
rowSums() + 1
P <- dim(unique_patterns)[1]
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
} else {
unique_hashed <- unique(hash)
P <- length(unique_hashed)
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
unique_patterns <- indicators[!duplicated(hash_id), ]
}
temp <- data.frame(indicators, rec1, rec2, hash_id)
temp <- data.frame(indicators, rec1, rec2, hash_id)
pattern_counts <- temp %>%
group_by(hash_id, .drop = F) %>%
count() %>%
pull()
pattern_lookup <- expand.grid(1:P, 1:n2) %>%
data.frame() %>%
setNames(., c("hash_id", "rec2"))
hash_to_file_1 <- temp %>%
select(rec1, rec2, hash_id) %>%
nest_by(rec2, hash_id, .keep = F) %>%
mutate(hash_id = as.integer(hash_id)) %>%
rowwise() %>%
mutate(N = nrow(data))
hash_to_file_1
temp %>%
select(hash_id, rec2) %>%
group_split(rec2)
?group_split
temp %>%
select(hash_id, rec2) %>%
group_split(rec2, .keep = F)
temp %>%
select(hash_id, rec2) %>%
group_split(rec2, .keep = F) %>%
lapply(., pull)
temp %>%
select(hash_id, rec2) %>%
group_split(rec2, .keep = F) %>%
lapply(., pull) %>%
lapply(., as.double)
devtools::load_all(".")
hash <- hash_comparisons(cd)
chain <- brl_efficient_serge(hash, S = S, burn = burn)
results <- estimate_links(chain, n1)
chain$Z
results <- estimate_links(chain$Z, n1)
results
out <- vi_efficient(hash)
alpha <- rep(1, ncol(hash$ohe))
beta <- rep(1, ncol(hash$ohe))
alpha_pi <- 1
beta_pi <- 1
phis <- c(out$pattern_weights, exp(digamma(out$b_pi)))
n2 <- hash$n2
n1 <- hash$n1
P <- nrow(hash$ohe)
pattern_probs <- lapply(1:n2, function(j){
c(out$pattern_weights * hash$pattern_counts_by_record[[j]],
exp(digamma(out$b_pi))) / out$C[j]
})
N_p <- hash$total_counts
a <- out$a
b <- out$b
a_pi <- out$a_pi
b_pi <- out$b_pi
pi <- rbeta(a_pi, b_pi)
pi <- rbeta(1, a_pi, b_pi)
pi <- rbeta(1, a_pi, b_pi)
samps <- 50
alpha <- rep(1, ncol(hash$ohe))
beta <- rep(1, ncol(hash$ohe))
alpha_pi <- 1
beta_pi <- 1
phis <- c(out$pattern_weights, exp(digamma(out$b_pi)))
n2 <- hash$n2
n1 <- hash$n1
P <- nrow(hash$ohe)
field_marker <- hash$field_marker
ohe <- hash$ohe
pattern_probs <- lapply(1:n2, function(j){
c(out$pattern_weights * hash$pattern_counts_by_record[[j]],
exp(digamma(out$b_pi))) / out$C[j]
})
N_p <- hash$total_counts
a <- out$a
b <- out$b
a_pi <- out$a_pi
b_pi <- out$b_pi
# fabl parameters
m <- as.vector(unlist(sapply(a, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
u <- as.vector(unlist(sapply(b, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
pi <- rbeta(1, a_pi, b_pi)
m_p <- ohe %>%
sweep(., 2, log(m), "*") %>%
rowSums() %>%
exp()
u_p <- ohe %>%
sweep(., 2, log(u), "*") %>%
rowSums() %>%
exp()
xi <- sapply(1:n2, function(j){
sample(1:(P+1), 1, F, pattern_probs[[j]])
})
n_p_xi <- xi %>%
factor(., 1:(P+1), 1:(P+1)) %>%
table() %>%
.[-(P+1)] %>%
as.numeric()
n_12_xi <- sum(n_p_xi)
log_ratio <- sum(n_p_xi * log(m_p) + (N_p - n_p_xi) * log(u_p)) +
sum((alpha - a) * m + (beta - b) * u) +
sapply(list(a, b), function(y){
split(y, field_marker) %>%
sapply(., function(x){
sum(lgamma(x)) - lgamma(sum(x))
})%>%
sum(.)
}) %>%
sum(.) -
sapply(list(alpha, beta), function(y){
split(y, field_marker) %>%
sapply(., function(x){
sum(lgamma(x)) - lgamma(sum(x))
})%>%
sum(.)
}) %>%
sum(.) +
(alpha_pi - a_pi + n_12_xi) * log(pi) +
(beta_pi - b_pi + n2 - n_12_xi)  * log(1 - pi) +
lbeta(a_pi, b_pi) -
lbeta(alpha_pi, beta_pi) -
n_12_xi * log(n1) - sum(log(phis)[xi] / out$C)
ratio <- exp(log_ratio)
m <- as.vector(unlist(sapply(a, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
u <- as.vector(unlist(sapply(b, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
pi <- rbeta(1, a_pi, b_pi)
m_p <- ohe %>%
sweep(., 2, log(m), "*") %>%
rowSums() %>%
exp()
u_p <- ohe %>%
sweep(., 2, log(u), "*") %>%
rowSums() %>%
exp()
alpha <- rep(1, ncol(hash$ohe))
beta <- rep(1, ncol(hash$ohe))
alpha_pi <- 1
beta_pi <- 1
phis <- c(out$pattern_weights, exp(digamma(out$b_pi)))
n2 <- hash$n2
n1 <- hash$n1
P <- nrow(hash$ohe)
field_marker <- hash$field_marker
ohe <- hash$ohe
pattern_probs <- lapply(1:n2, function(j){
c(out$pattern_weights * hash$pattern_counts_by_record[[j]],
exp(digamma(out$b_pi))) / out$C[j]
})
N_p <- hash$total_counts
a <- out$a
a
b <- out$b
a_pi <- out$a_pi
b_pi <- out$b_pi
m <- as.vector(unlist(sapply(a, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
a_split <- split(a, field_marker)
b_split <- split(b, field_marker)
m <- as.vector(unlist(sapply(a_split, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
u <- as.vector(unlist(sapply(b_split, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
pi <- rbeta(1, a_pi, b_pi)
m_p <- ohe %>%
sweep(., 2, log(m), "*") %>%
rowSums() %>%
exp()
u_p <- ohe %>%
sweep(., 2, log(u), "*") %>%
rowSums() %>%
exp()
xi <- sapply(1:n2, function(j){
sample(1:(P+1), 1, F, pattern_probs[[j]])
})
n_p_xi <- xi %>%
factor(., 1:(P+1), 1:(P+1)) %>%
table() %>%
.[-(P+1)] %>%
as.numeric()
n_12_xi <- sum(n_p_xi)
log_ratio <- sum(n_p_xi * log(m_p) + (N_p - n_p_xi) * log(u_p)) +
sum((alpha - a) * m + (beta - b) * u) +
sapply(list(a, b), function(y){
split(y, field_marker) %>%
sapply(., function(x){
sum(lgamma(x)) - lgamma(sum(x))
})%>%
sum(.)
}) %>%
sum(.) -
sapply(list(alpha, beta), function(y){
split(y, field_marker) %>%
sapply(., function(x){
sum(lgamma(x)) - lgamma(sum(x))
})%>%
sum(.)
}) %>%
sum(.) +
(alpha_pi - a_pi + n_12_xi) * log(pi) +
(beta_pi - b_pi + n2 - n_12_xi)  * log(1 - pi) +
lbeta(a_pi, b_pi) -
lbeta(alpha_pi, beta_pi) -
n_12_xi * log(n1) - sum(log(phis)[xi] / out$C)
ratio <- exp(log_ratio)
n_12_xi
n_p_xi
pattern_probs <- lapply(1:n2, function(j){
c(out$pattern_weights * hash$pattern_counts_by_record[[j]],
exp(digamma(out$b_pi))) / out$C[j]
})
pattern_probs[[1]]
n_p_xi * log(m_p)
(N_p - n_p_xi)
N_p
(N_p - n_p_xi) * log(u_p)
sum(n_p_xi * log(m_p) + (N_p - n_p_xi) * log(u_p))
(alpha - a)
log_ratio <- sum(n_p_xi * log(m_p) + (N_p - n_p_xi) * log(u_p)) +
sum((alpha - a) * log(m) + (beta - b) * log(u)) +
sapply(list(a, b), function(y){
split(y, field_marker) %>%
sapply(., function(x){
sum(lgamma(x)) - lgamma(sum(x))
})%>%
sum(.)
}) %>%
sum(.) -
sapply(list(alpha, beta), function(y){
split(y, field_marker) %>%
sapply(., function(x){
sum(lgamma(x)) - lgamma(sum(x))
})%>%
sum(.)
}) %>%
sum(.) +
(alpha_pi - a_pi + n_12_xi) * log(pi) +
(beta_pi - b_pi + n2 - n_12_xi)  * log(1 - pi) +
lbeta(a_pi, b_pi) -
lbeta(alpha_pi, beta_pi) -
n_12_xi * log(n1) - sum(log(phis)[xi] / out$C)
ratio <- exp(log_ratio)
multivar_beta <- function(vec){
sum(lgamma(x)) - lgamma(sum(x))
}
multivar_beta(a_split)
multivar_beta <- function(x){
sum(lgamma(x)) - lgamma(sum(x))
}
multivar_beta(a_split)
log_ratio <- sum(n_p_xi * log(m_p) + (N_p - n_p_xi) * log(u_p)) +
sum((alpha - a) * log(m) + (beta - b) * log(u)) +
sapply(list(a, b), function(y){
split(y, field_marker) %>%
sapply(., function(x){
sum(lgamma(x)) - lgamma(sum(x))
})%>%
sum(.)
}) %>%
sum(.) -
sapply(a_split, multivar_beta)
sapply(a_split, multivar_beta)
sum(sapply(a_split, multivar_beta) +
sapply(b_split, multivar_beta) -
sapply(alpha, multivar_beta) -
sapply(beta, multivar_beta))
a_pi
n_12_xi
(alpha_pi - a_pi + n_12_xi) * log(pi)
log_ratio <- sum(n_p_xi * log(m_p) + (N_p - n_p_xi) * log(u_p)) +
sum((alpha - a) * log(m) + (beta - b) * log(u)) +
sum(sapply(a_split, multivar_beta) +
sapply(b_split, multivar_beta) -
sapply(alpha, multivar_beta) -
sapply(beta, multivar_beta)) +
(alpha_pi - a_pi + n_12_xi) * log(pi) +
(beta_pi - b_pi + n2 - n_12_xi)  * log(1 - pi) +
lbeta(a_pi, b_pi) -
lbeta(alpha_pi, beta_pi) -
n_12_xi * log(n1) - sum(log(phis)[xi] / out$C) #x_j = 0 is coded as P+1
ratio <- exp(log_ratio)
sum(n_p_xi * log(m_p) + (N_p - n_p_xi) * log(u_p))
sum((alpha - a) * log(m) + (beta - b) * log(u))
sum(sapply(a_split, multivar_beta) +
sapply(b_split, multivar_beta) -
sapply(alpha, multivar_beta) -
sapply(beta, multivar_beta))
sapply(a_split, multivar_beta) +
sapply(b_split, multivar_beta) -
sapply(alpha, multivar_beta) -
sapply(beta, multivar_beta)
sapply(beta, multivar_beta)
sapply(alpha, multivar_beta)
devtools::load_all(".")
