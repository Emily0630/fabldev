file1 <- records %>%
filter(file ==1,
rec_id <= n1) %>%
select(-rec_id) %>%
as.matrix(.) %>%
data.frame(.) %>%
mutate(occup = as.numeric(occup))
file2 <- records %>%
filter(file == 2,
rec_id %in% c(1:overlap, (n1 +1):(1000 - overlap))) %>%
select(-rec_id) %>%
as.matrix() %>%
data.frame(.) %>%
mutate(occup = as.numeric(occup))
cd <- compare_records(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
cd[[1]] <- apply(cd[[1]], 2, as.numeric)
cd_BK <- fabldev:::compare_records_BK(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
hash <- hash_comparisons(cd, all_patterns, algorithm = c("vabl", "fabl", "brl"))
devtools::load_all(".")
cd_BK <- compare_records_BK(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
hash_BK <- hash_comparisons(cd, all_patterns, algorithm = c("vabl", "fabl", "brl"))
hash <- hash_comparisons(cd, all_patterns, algorithm = c("vabl")
hash <- hash_comparisons(cd, all_patterns, algorithm = c("vabl"))
hash <- hash_comparisons(cd, all_patterns, algorithm = c("vabl"))
hash_BK <- hash_comparisons(cd, all_patterns, algorithm = c("vabl")
hash_BK <- hash_comparisons(cd, all_patterns, algorithm = c("vabl"))
hash_BK <- hash_comparisons(cd, all_patterns, algorithm = c("vabl"))
out <- vabl(hash)
result <- vi_estimate_links(out, hash)
result$Z_hat
out <- vabl(hash_BK)
result <- vi_estimate_links(out, hash_BK)
result$Z_hat
R
is.null(R)
!is.null(R)
sei(1:5, 2)
sei(1:5, 10)
sei(1:5, NULL)
sei(1:5, 1)
sei(1:5, 1)
sei(1:5, 1)
NULL > 0
detach(fabldev)
detach("fabldev")
devtools::load_all(".")
hash_BK <- hash_comparisons(cd, all_patterns, algorithm = c("vabl"))
hash_BK <- hash_comparisons(cd, all_patterns, algorithm = c("vabl", "fabl"))
devtools::load_all(".")
library(RecordLinkage)
library(dplyr)
library(stringr)
library(purrr)
library(readr)
files <- list.files(path = "../../bk_vabl/data/sadinle_sim_data/", full.names = T)
i = 1
j = 1
m_prior = 1
u_prior = 1
alpha = 1
beta = 1
S = 1000
burn = 100
show_progress = F
fast = F
R = NULL
all_patterns = TRUE
tmax= 200
threshold = 1e-6
resolve = T
method = c("vabl", "fabl", "brl")
overlap_vals <- c(50, 250, 450)
overlap <- overlap_vals[j]
records <- read_csv(files[i], col_types = cols())
records$file <- rep(2:1, length.out = dim(records)[1])
records <- records %>%
janitor::clean_names() %>%
mutate(rec_id = as.numeric(str_extract(rec_id, "\\d{3}")) + 1)
n1 <- 500
n2 <- 500
Ztrue <- rep(0, n2)
Ztrue[1:overlap] <- 1:overlap
file1 <- records %>%
filter(file ==1,
rec_id <= n1) %>%
select(-rec_id) %>%
as.matrix(.) %>%
data.frame(.) %>%
mutate(occup = as.numeric(occup))
file2 <- records %>%
filter(file == 2,
rec_id %in% c(1:overlap, (n1 +1):(1000 - overlap))) %>%
select(-rec_id) %>%
as.matrix() %>%
data.frame(.) %>%
mutate(occup = as.numeric(occup))
cd <- compare_records(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
cd[[1]] <- apply(cd[[1]], 2, as.numeric)
cd_BK <- compare_records_BK(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
hash <- hash_comparisons(cd, all_patterns, algorithm = c("vabl"))
hash_BK <- hash_comparisons(cd, all_patterns, algorithm = c("vabl", "fabl"))
indicators <- cd[[1]]
N <- dim(indicators)[1]
n1 <- cd[[2]]
n2 <- cd[[3]]
levels <- cd[[4]]
fields <- seq_along(cd[[4]])
field_marker <- sapply(fields, function(x){
rep(x, cd[[4]][x])
}) %>%
unlist(.) %>%
as.vector(.)
ids <- expand.grid(1:n1, 1:n2)
rec1 <- ids[,1]
rec2 <- ids[,2]
Lf_vec<- (levels) %>%
c(0, .) %>%
cumsum()
hash_vals <- purrr::imap(cd[[4]], ~hash_field(.x, .y, Lf_vec)) %>%
unlist()
hash <- sweep(indicators, 2, hash_vals, "*") %>%
rowSums() + 1
if(all_patterns == TRUE){
unique_patterns <- possible_patterns_ohe(levels)
unique_hashed <- sweep(unique_patterns, 2, hash_vals, "*") %>%
rowSums() + 1
P <- dim(unique_patterns)[1]
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
} else {
unique_hashed <- unique(hash)
P <- length(unique_hashed)
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
unique_patterns <- indicators[!duplicated(hash_id), ]
}
temp <- data.frame(rec1, rec2, hash_id)
hash_count_list <- temp %>%
group_by(rec2, hash_id, .drop = F) %>%
count() %>%
ungroup() %>%
group_split(rec2) %>%
purrr::map(~.x %>%
select(n) %>%
pull()
)
total_counts <- temp %>%
group_by(hash_id, .drop = F) %>%
count() %>%
pull()
pattern_lookup <- expand.grid(1:P, 1:n2) %>%
data.frame() %>%
setNames(., c("hash_id", "rec2"))
pair_to_pattern <- NULL
hash_to_file_1 <- temp %>%
select(rec1, rec2, hash_id) %>%
nest_by(rec2, hash_id, .keep = F) %>%
mutate(hash_id = as.integer(hash_id)) %>%
rowwise() %>%
mutate(N = nrow(data))
hash_to_file_1 <- left_join(x = pattern_lookup,
y = hash_to_file_1,
by = c("hash_id", "rec2"))
hash_to_file_1$N[is.na(hash_to_file_1$N)] <- 0
flags <- NULL
hash_to_file_1 <- hash_to_file_1 %>%
group_split(rec2) %>%
purrr::map(., ~ .x %>%
group_split(hash_id)) %>%
purrr::map(., ~purrr::map(.x, `[[`, "data")) %>%
purrr::map(., ~purrr::map(., ~ unname(unlist(.x))))
View(hash_to_file_1)
hash_to_file_1 <- temp %>%
select(rec1, rec2, hash_id) %>%
nest_by(rec2, hash_id, .keep = F) %>%
mutate(hash_id = as.integer(hash_id)) %>%
rowwise() %>%
mutate(N = nrow(data))
hash_to_file_1 <- left_join(x = pattern_lookup,
y = hash_to_file_1,
by = c("hash_id", "rec2"))
hash_to_file_1$N[is.na(hash_to_file_1$N)] <- 0
View(hash_to_file_1)
thing <- hash_to_file_1 %>%
group_split(rec2) %>%
purrr::map(., ~ .x %>%
group_split(hash_id)) %>%
purrr::map(., ~purrr::map(.x, `[[`, "data")) %>%
purrr::map(., ~purrr::map(., ~ unname(unlist(.x))))
View(thing)
R = 0
hash_to_file_1 <- hash_to_file_1 %>%
group_split(rec2) %>%
purrr::map(., ~ .x %>%
group_split(hash_id)) %>%
purrr::map(., ~purrr::map(.x, `[[`, "data")) %>%
purrr::map(., ~purrr::map(., ~ unname(unlist(.x))))
if(R > 0){
hash_to_file_1 <- lapply(hash_to_file_1, function(z){
purrr::map(z, ~sei(.x, R))
})}
R = 5
if(R > 0){
hash_to_file_1 <- lapply(hash_to_file_1, function(z){
purrr::map(z, ~sei(.x, R))
})}
View(hash_to_file_1)
View(hash_to_file_1)
hash_BK <- hash_comparisons(cd, algorithm = c("vabl", "fabl"), all_patterns)
hash_BK <- hash_comparisons(cd, algorithm = c("vabl", "fabl"), R = 0, all_patterns)
indicators <- cd[[1]]
N <- dim(indicators)[1]
n1 <- cd[[2]]
n2 <- cd[[3]]
levels <- cd[[4]]
fields <- seq_along(cd[[4]])
field_marker <- sapply(fields, function(x){
rep(x, cd[[4]][x])
}) %>%
unlist(.) %>%
as.vector(.)
ids <- expand.grid(1:n1, 1:n2)
rec1 <- ids[,1]
rec2 <- ids[,2]
Lf_vec<- (levels) %>%
c(0, .) %>%
cumsum()
hash_vals <- purrr::imap(cd[[4]], ~hash_field(.x, .y, Lf_vec)) %>%
unlist()
hash <- sweep(indicators, 2, hash_vals, "*") %>%
rowSums() + 1
if(all_patterns == TRUE){
unique_patterns <- possible_patterns_ohe(levels)
unique_hashed <- sweep(unique_patterns, 2, hash_vals, "*") %>%
rowSums() + 1
P <- dim(unique_patterns)[1]
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
} else {
unique_hashed <- unique(hash)
P <- length(unique_hashed)
hash_id <- match(hash, unique_hashed) %>%
factor(levels = 1:P)
unique_patterns <- indicators[!duplicated(hash_id), ]
}
temp <- data.frame(rec1, rec2, hash_id)
hash_count_list <- temp %>%
group_by(rec2, hash_id, .drop = F) %>%
count() %>%
ungroup() %>%
group_split(rec2) %>%
purrr::map(~.x %>%
select(n) %>%
pull()
)
total_counts <- temp %>%
group_by(hash_id, .drop = F) %>%
count() %>%
pull()
pattern_lookup <- expand.grid(1:P, 1:n2) %>%
data.frame() %>%
setNames(., c("hash_id", "rec2"))
pair_to_pattern <- NULL
hash_to_file_1 <- temp %>%
select(rec1, rec2, hash_id) %>%
nest_by(rec2, hash_id, .keep = F) %>%
mutate(hash_id = as.integer(hash_id)) %>%
rowwise() %>%
mutate(N = nrow(data))
hash_to_file_1 <- left_join(x = pattern_lookup,
y = hash_to_file_1,
by = c("hash_id", "rec2"))
hash_to_file_1$N[is.na(hash_to_file_1$N)] <- 0
flags <- NULL
thing <- hash_to_file_1 %>%
group_split(rec2) %>%
purrr::map(., ~ .x %>%
group_split(hash_id)) %>%
purrr::map(., ~purrr::map(.x, `[[`, "data")) %>%
purrr::map(., ~purrr::map(., ~ unname(unlist(.x))))
View(thing)
hash_to_file_1[1, ]$data
hash_to_file_1[125, ]$data
hash_to_file_1[125, ]$data %>% unlist()
hash_to_file_1$data[[1]]
hash_to_file_1$data[1]
hash_to_file_1[125, ]$data[[1]]
hash_to_file_1[125, ]$data[[1]] %>% sample(., 1)
hash_to_file_1[125, ]$data[[1]] %>% sample(., 2)
hash_to_file_1[125, ]$data[c(1, 2)]
hash_to_file_1[125, ]$data[1]
hash_to_file_1[125, ]$data[2]
hash_to_file_1$data[1]
hash_to_file_1$data[c(1, 2)]
hash_to_file_1$data[[c(1, 2)]]
thing<- lapply(hash_to_file_1$data, function(z){
purrr::map(z, ~sei(.x, R))
})}
thing<- lapply(hash_to_file_1$data, function(z){
purrr::map(z, ~sei(.x, R))
}}
if(R > 0){
thing <- lapply(hash_to_file_1$data, function(z){
purrr::map(z, ~sei(.x, R))
})
}
View(thing)
thing <- hash_to_file_1 %>%
group_split(rec2)
View(thing)
library(devtools)
create_package("vabl")
create_package("../vabl")
devtools::load_all(".")
library(RecordLinkage)
library(dplyr)
library(stringr)
library(purrr)
library(readr)
files <- list.files(path = "../../bk_vabl/data/sadinle_sim_data/", full.names = T)
i = 1
j = 1
m_prior = 1
u_prior = 1
alpha = 1
beta = 1
S = 1000
burn = 100
show_progress = F
fast = F
R = NULL
all_patterns = TRUE
tmax= 200
threshold = 1e-6
resolve = T
method = c("vabl", "fabl", "brl")
overlap_vals <- c(50, 250, 450)
overlap <- overlap_vals[j]
records <- read_csv(files[i], col_types = cols())
records$file <- rep(2:1, length.out = dim(records)[1])
records <- records %>%
janitor::clean_names() %>%
mutate(rec_id = as.numeric(str_extract(rec_id, "\\d{3}")) + 1)
n1 <- 500
n2 <- 500
Ztrue <- rep(0, n2)
Ztrue[1:overlap] <- 1:overlap
file1 <- records %>%
filter(file ==1,
rec_id <= n1) %>%
select(-rec_id) %>%
as.matrix(.) %>%
data.frame(.) %>%
mutate(occup = as.numeric(occup))
file2 <- records %>%
filter(file == 2,
rec_id %in% c(1:overlap, (n1 +1):(1000 - overlap))) %>%
select(-rec_id) %>%
as.matrix() %>%
data.frame(.) %>%
mutate(occup = as.numeric(occup))
cd <- compare_records(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
cd[[1]] <- apply(cd[[1]], 2, as.numeric)
cd_BK <- compare_records_BK(file1, file2, c(2, 3, 5, 6),
types = c("lv", "lv", "bi", "bi"))
hash <- hash_comparisons(cd, algorithm = c("vabl"), all_patterns)
hash_BK <- hash_comparisons(cd, algorithm = c("vabl", "fabl"), R = 0, all_patterns)
out <- vabl(hash)
result <- vi_estimate_links(out, hash)
result$Z_hat
chain <- fabl(hash_BK)
View(hash_BK)
hash <- hash_BK
n1 <- hash$n1
n2 <- hash$n2
field_marker <- hash$field_marker
unique_patterns <- hash$ohe
pattern_counts <- hash$total_counts
P <- nrow(unique_patterns)
hash_count_list <- hash$hash_count_list
hash_to_file_1 <-hash$hash_to_file_1
candidates_P <- 0:P
Z_samps <- matrix(0, nrow = n2, ncol = S)
m_samps <- matrix(NA, nrow = length(field_marker), ncol = S)
u_samps <- matrix(NA, nrow = length(field_marker), ncol = S)
L_samps <- vector(length = S)
pi_samps <- vector(length = S)
# Initialize
Z <- rep(0, n2)
L <- 0
m <- u <- rep(0, length(field_marker))
matches <- rep(0,P)
m_prior = 1
u_prior = 1
alpha = 1
beta = 1
s = 1
# Update m and u
AZ <- sweep(unique_patterns, MARGIN = 1, STAT = matches, FUN = "*") %>%
colSums() %>%
unname()
nonmatches <- pattern_counts - matches
BZ <- sweep(unique_patterns, MARGIN = 1, STAT = nonmatches, FUN = "*") %>%
colSums() %>%
unname()
m_post <- m_prior + AZ
u_post <- u_prior + BZ
m_post <- split(m_post, field_marker)
m <- as.vector(unlist(sapply(m_post, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
u_post <- split(u_post, field_marker)
u <- as.vector(unlist(sapply(u_post, function(x){
prob <- MCMCpack::rdirichlet(1, x)
prob/sum(prob)
})))
# Calculate weights
ratio <- (log(m) - log(u)) %>%
rep(., P) %>%
matrix(., nrow = P, byrow = TRUE)
unique_weights <- exp(rowSums(ratio * unique_patterns, na.rm = TRUE))
hash_weights <- lapply(hash_count_list, function(x){
x * unique_weights
})
pi <- rbeta(1, L + alpha, n2 - L + beta)
for(j in 1:n2){
if(Z[j] > 0){
L <- L - 1
}
Z[j] <- sample(candidates_P, 1,
prob = c(1 - pi, hash_weights[[j]] * pi / n1))
if(Z[j] > 0){
index <- ceiling(runif(1) * length(hash_to_file_1[[j]][[Z[j]]]))
Z_samps[j, s] <- hash_to_file_1[[j]][[Z[j]]][index]
L <- L + 1
}
}
j
Z[j] <- sample(candidates_P, 1,
prob = c(1 - pi, hash_weights[[j]] * pi / n1))
index <- ceiling(runif(1) * length(hash_to_file_1[[j]][[Z[j]]]))
devtools::load_all(".")
hash_BK <- hash_comparisons(cd, algorithm = c("vabl", "fabl"), R = 0, all_patterns)
chain <- fabl(hash_BK)
chain <- fabl(hash_BK, S = 100)
names(chain)
names(out)
devtools::load_all(".")
results <- estimate_links(out, hash_BK)
devtools::load_all(".")
results <- estimate_links(out, hash_BK)
devtools::load_all(".")
results <- estimate_links(out, hash_BK)
devtools::load_all(".")
results <- estimate_links(out, hash_BK)
results$Z_hat
results <- estimate_links(chain, hash_BK)
results$Z_hat
results <- estimate_links(out, hash_BK)
results$Z_hat
results$prob
View(hash_BK)
results <- estimate_links(out, hash)
results$Z_hat
n2 <- hash$n2
pattern_probs <- lapply(1:n2, function(j){
out$pattern_weights/out$C[j]
})
possible_records <- lapply(1:n2, function(j){
record <- c(hash$flags[[j]]$eligible_records, 0)
prob <- c(pattern_probs[[j]][hash$flags[[j]]$eligible_patterns],
exp(digamma(out$b_pi)) / out$C[j])
data.frame(record, prob)
})
max_prob <- lapply(possible_records, function(x){
x[which.max(x$prob), ]
}) %>%
do.call(rbind, .)
best_match <- max_prob$record
prob_best_match <- max_prob$prob
prob_no_link <- out$b_pi/out$C
link_indicator <- best_match > 0
link_indicator
pattern_probs
View(possible_records)
View(pattern_probs)
j = 1
record <- c(hash$flags[[j]]$eligible_records, 0)
record
pattern_probs[[j]]
pattern_probs[[j]][hash$flags[[j]]$eligible_patterns]
hash$flags[[j]]
hash$flags[[j]]$eligible_patterns
P
pattern_probs[[j]]
hash$ohe
View(out)
out <- vabl(hash)
View(out)
results <- estimate_links(out, hash)
results$Z_hat
results <- estimate_links(chain, hash_BK)
results$Z_hat
results <- estimate_links(out, hash_BK)
results$Z_hat
